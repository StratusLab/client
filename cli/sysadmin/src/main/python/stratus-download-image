#!/usr/bin/env python
#
# Created as part of the StratusLab project (http://stratuslab.eu),
# co-funded by the European Commission under the Grant Agreement
# INFSO-RI-261552."
#
# Copyright (c) 2010, SixSq Sarl
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import sys
from optparse import OptionParser

sys.path.append('/var/lib/stratuslab/python')

from stratuslab.Util import modulePath
import stratuslab.Util as Util
from stratuslab.CommandBase import CommandBase
from stratuslab.Configurator import Configurator
from stratuslab.ConfigHolder import ConfigHolder
from stratuslab.marketplace.Downloader import Downloader

class MainProgram(CommandBase):
    '''A command-line program to download machine and disk images from a StratusLab Market-Place.'''

    def __init__(self):
        self.uri = None
        super(MainProgram, self).__init__()

    def parse(self):
        usage = '''usage: %prog [options] <uri>
        
<uri>    URI of the metadata entry corresponding to the image to download
'''
        self.parser.usage = usage

        self.parser.add_option('-e', '--endpoint', dest='endpoint',
                               help='URL of the root StratusLab Market-Place endpoint (default: %s)' % Downloader.ENDPOINT, 
                               metavar='URL',
                               default=Downloader.ENDPOINT)

        self.parser.add_option('-o', '--output', dest='localImageFilename',
                               help='Where to save the downloaded image (default: %s)' % Downloader.LOCAL_IMAGE_FILENAME, 
                               metavar='FILE',
                               default=Downloader.LOCAL_IMAGE_FILENAME)

        self.options, self.args = self.parser.parse_args()

        self.checkArgumentsLength()

    def checkArgumentsLength(self):
        if len(self.args) < 1:
            self.usageExitTooFewArguments()
        if len(self.args) > 1:
            self.usageExitTooManyArguments()

    def doWork(self):
        configHolder = ConfigHolder(self.options.__dict__)
        
        self.uri = self.args[0]

        downloder = Downloader(configHolder)
        imageFilename = downloder.download(self.uri)
        self.printDetail('Downloaded image to: %s' % imageFilename)

if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
