import os.path
#!/usr/bin/env python

import os
import subprocess
import sys
from optparse import OptionParser

sys.path.append('/usr/lib/stratuslab')
sys.path.append(os.path.abspath('%s/../src/' % os.path.abspath(os.path.dirname(__file__))))

from stratuslab.Util import fileGetContent
from stratuslab.Util import cliLineSplitChar
from stratuslab.CommandBase import CommandBase

class MainProgram(CommandBase):
    '''A command line to install stratuslab on a remote host'''

    def __init__(self):
        self.rootPath = os.path.abspath('%s/../' %
                                        os.path.abspath(os.path.dirname(__file__)))
        super(MainProgram, self).__init__()

    def parse(self):
        usage = 'usage: %prog [options]'
        self.parser.usage = usage

        self.parser.add_option('-n', '--nodes', dest='nodes',
                               help='node list, separate by space', default='localhost')
        self.parser.add_option('-p', '--port', dest='sshPort',
                               help='ssh port of the frontend', default=22)
        self.parser.add_option('-k', '--key', dest='sshKey',
                               help='ssh key to connect to the frontend',
                               metavar='KEY_PATH',
                               default=os.path.expandvars("$HOME/.ssh/root_hudson_id_rsa.key"))
        self.parser.add_option('--ssh-options', dest='sshOptions',
                               default='-p %(sshPort)s -i %(sshKey)s -l root', metavar='OPTIONS')
        self.parser.add_option('--scp-options', dest='scpOptions',
                               default='-P %(sshPort)s -i %(sshKey)s -q -r',
                               metavar='OPTIONS')
        self.parser.add_option('-f', '--frontend', dest='frontend',
                               help='frontend endpoint', metavar='ENDPOINT',
                               default='localhost')
        self.parser.add_option('-u', '--upload-dir', metavar='PATH',
                               dest='uploadDir', help='remote source directory',
                               default='/tmp/stratuslab-remote-install')
        self.parser.add_option('-c', '--config', dest='config', 
                               help='additional config file with "key:value#key:value" in',
                               default=None)

        (self.options, self.args) = self.parser.parse_args()

        sshSub = {'sshPort': self.options.sshPort,
            'sshKey': self.options.sshKey,}
        self.options.sshOptions = self.options.sshOptions % (sshSub)
        self.options.scpOptions = self.options.scpOptions % (sshSub)

    def doWork(self):
        # TODO: Use standart function to display message
        print 'Multi-install workaround...'
        self.multiInstallWorkaround()
        print 'Upload stratuslab...'
        self.uploadStratuslab()
        print 'Configure stratuslab...'
        self.configureStratuslab()
        self.copySshPrivateKey()
        print 'Install stratuslab frontend...'
        self.installStratuslabFrontend()
        print 'Install stratuslab nodes...'
        self.installStratuslabNodes()

    def multiInstallWorkaround(self):
        self.sshCmd(['su', '-l', 'oneadmin', '-c', '"one stop"'],
                 exitOnError=False)
        self.sshCmd(['rm', '-rf', '/srv/cloud/one/lib'],
                 exitOnError=False)
        self.sshCmd(['rm', '-rf', '/srv/cloud/one/var'],
                 exitOnError=False)
        self.sshCmd(['rm', '-rf', '/srv/cloud/one/.ssh'],
                 exitOnError=False)

    def sshCmd(self, command, shell=False, exitOnError=True):
        # TODO: Use functions in Util
        sshCmd = ['ssh']
        sshCmd.extend(self.options.sshOptions.split(' '))
        sshCmd.append(self.options.frontend)
        sshCmd.extend(command)
        self.execute(sshCmd, shell, exitOnError)

    def execute(self, command, shell=False, exitOnError=True):
        # TODO: Use functions in Util
        process = subprocess.Popen(command, shell=shell)
        process.wait()
        if process.returncode != 0 and exitOnError:
            print 'Command failled: %s' % ' '.join(command)
            sys.exit(1)

    def uploadStratuslab(self):
        self.sshCmd(['rm', '-rf', self.options.uploadDir],
                 exitOnError=False)
        self.sshCmd(['mkdir', '-p', self.options.uploadDir])
        self.scp('%s/src/' % self.rootPath, '%s:%s' % (
                 self.options.frontend, self.options.uploadDir))
        self.scp('%s/scripts/' % self.rootPath, '%s:%s' % (
                 self.options.frontend, self.options.uploadDir))

    def scp(self, src, dest):
        # TODO: Use functions in Util
        scpCmd = ['scp']
        scpCmd.extend(self.options.scpOptions.split(' '))
        scpCmd.append(src)
        scpCmd.append('root@%s' % dest)
        self.execute(scpCmd)

    def configureStratuslab(self):
        content = ''
        if self.options.config and os.path.isfile(self.options.config):
            content = fileGetContent(self.options.config)
            
        baseConfigCmd = ['python', '%s/scripts/stratus-config'
            % self.options.uploadDir]

        if content:
            for item in content.split(cliLineSplitChar):
                # hack to make a real copy of the var
                currentCmd = baseConfigCmd[:]
                currentCmd.append(item.split(':')[0])
                currentCmd.append('"%s"' %(' '.join(item.split(':')[1:])))
                self.sshCmd(currentCmd)
        else:
            self.sshCmd(baseConfigCmd)

    def copySshPrivateKey(self):
        self.scp(self.options.sshKey, '%s:.ssh/id_rsa' 
                 % self.options.frontend)

    def installStratuslabFrontend(self):
        self.sshCmd(['python', '%s/scripts/stratus-install'
                 % self.options.uploadDir])

    def installStratuslabNodes(self):
        for node in self.options.nodes.split(' '):
            self.sshCmd(['python', '%s/scripts/stratus-install'
                     % self.options.uploadDir, '-n', node])


if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
