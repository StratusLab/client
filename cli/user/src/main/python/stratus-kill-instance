#!/usr/bin/env python
#
# Created as part of the StratusLab project (http://stratuslab.eu),
# co-funded by the European Commission under the Grant Agreement
# INFSO-RI-261552."
#
# Copyright (c) 2010, SixSq Sarl
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import sys
from optparse import OptionParser

sys.path.append('/var/lib/stratuslab/python')

from stratuslab.Util import modulePath
from stratuslab.CommandBase import CommandBase
from stratuslab.Runner import Runner
from stratuslab.ConfigHolder import ConfigHolder
from stratuslab.AuthnCommand import AuthnCommand


class MainProgram(AuthnCommand):
    '''A command-line program to kill a virtual machine.'''

    def __init__(self):
        self.vmIds = []
        super(MainProgram, self).__init__()

    def parse(self):
        usage = '''%prog [options] vm-id ...'''

        self.parser.usage=usage

        self.parser.add_option('-i', '--input', dest='inVmIdsFile',
                help='file containing line separated vm-ids', metavar='FILE',
                default=None)
        self.parser.add_option('--shutdown', dest='vmShutdown',
                help='Attempt VM shutdown. VM should support ACPI. '
                'Without the option VM is forcefully terminated.',
                default=False, action='store_true')

        AuthnCommand.addCloudEndpointOptions(self.parser)

        super(MainProgram, self).parse()

        self.options, self.vmIds = self.parser.parse_args()

    def checkOptions(self):
        AuthnCommand.checkCloudEndpointOptionsOnly(self)

        if not self.vmIds and not self.options.inVmIdsFile:
            self.parser.error('Missing vm-id or input file (-i/--input)')

        super(MainProgram, self).checkOptions()

    def doWork(self):
        configHolder = ConfigHolder(self.options.__dict__)
        runner = Runner(None, configHolder)
        runner.killInstances(self.vmIds)

if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
