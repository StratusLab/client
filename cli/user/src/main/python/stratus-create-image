#!/usr/bin/env python
#
# Created as part of the StratusLab project (http://stratuslab.eu),
# co-funded by the European Commission under the Grant Agreement
# INFSO-RI-261552."
#
# Copyright (c) 2010, SixSq Sarl
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import sys

sys.path.append('/var/lib/stratuslab/python')

from stratuslab.Creator import Creator
from stratuslab.Runnable import Runnable
from stratuslab.ConfigHolder import ConfigHolder
import stratuslab.Util as Util
from stratuslab.AuthnCommand import AuthnCommand

class MainProgram(Runnable):
    '''A command-line program to create StratusLab image.'''

    def parse(self):

        self.parser.usage = '''%prog [options] base-image'''

        self.parser.add_option('--show-name', dest='showImageName',
                help='show the name the new image will take',
                default=False, action='store_true')

        self.parser.add_option('-n', '--name', dest='newInstalledSoftwareName',
                help='name of the new image',
                default='', metavar='FILE')

        self.parser.add_option('--name-version', dest='newInstalledSoftwareVersion',
                help='version of installed software',
                default='', metavar='VERSION')

        self.parser.add_option('--image-group', dest='newImageGroupName',
                help='group for the new image (this corresponds to the base image folder - e.g. base, grid)',
                default='', metavar='NAME')

        self.parser.add_option('--image-version', dest='newImageGroupVersion',
                help='version for the new image',
                default='', metavar='VERSION')

        self.parser.add_option('--author', dest='author',
                help='Author of the new image',
                default='', metavar='NAME')

        self.parser.add_option('-s', '--scripts', dest='scripts',
                help='scripts to execute on the VM (comma separated)',
                default='', metavar='FILE')

        self.parser.add_option('-a', '--packages', dest='packages',
                help='packages to install on the machine (comma separated)',
                default='', metavar='PACKAGE')

        self.parser.add_option('--installer', dest='installer',
                help='package installer (default yum)',
                default='yum', metavar='NAME')

        self.parser.add_option('--os', dest='os',
                help='operation system. By default is taken from Manifest.',
                default='', metavar='OS')

        self.parser.add_option('--extra-os-repos', dest='extraOsReposUrls',
                help='extra repositories to install [--packages] from (comma separated). For apt \
"base_uri distribution [component1] ..."',
                default='', metavar='URL')

        self.parser.add_option('--exclude', dest='excludeFromBundle',
                help='exclude file/dir from bundle (comma separated). Note: /tmp and /mnt are automatically excluded',
                default='', metavar='FILE')

        self.parser.add_option('--comment', dest='comment',
                help='Comment to append to the manifest file',
                default='', metavar='TEXT')

        self.parser.add_option('--no-shutdown', dest='shutdownVm',
                help='leave the VM running. A public IP will be assigned.',
                default=True, action='store_false')

        self.parser.add_option('-r', '--repository', dest='apprepoEndpoint',
                help='appliance repository address. Url of the root of the appliance repository. '
                'Default STRATUSLAB_APPREPO_ENDPOINT',
                default=os.getenv('STRATUSLAB_APPREPO_ENDPOINT'), metavar='ADDRESS')

        self.parser.add_option('-U', '--repo-username', dest='apprepoUsername',
                help='repository username. Default STRATUSLAB_APPREPO_USERNAME',
                default=os.getenv('STRATUSLAB_APPREPO_USERNAME'))

        self.parser.add_option('-P', '--repo-password', dest='apprepoPassword',
                help='repository password. Default STRATUSLAB_APPREPO_PASSWORD',
                default=os.getenv('STRATUSLAB_APPREPO_PASSWORD'))

        self.parser.add_option('--no-upload', dest='noUpload',
                help='do not upload the new image to an appliances repository. \
                Requires --no-shutdown (otherwise it makes little sense ;-)',
                default=False, action='store_true')

        self.parser.add_option('--extra-disk', dest='extraDiskSize',
                help='extra data disk size in GB', metavar='INT',
                action='callback', callback=self.diskSizeOptionCallback,
                default=0, type='int')

        self.parser.add_option('--persistent-disk', dest='persistentDiskUUID',
                help='persistent disk UUID',
                default=None)

        self.parser.add_option('--vm-start-timeout', dest='vmStartTimeout',
                help='seconds to wait for VM to become available. Default: %i' % Creator.VM_START_TIMEOUT,
                default=Creator.VM_START_TIMEOUT, type='int', metavar='TIMEOUT')

        self.parser.add_option('--vm-ping-timeout', dest='vmPingTimeout',
                help='seconds to wait for VM\'s network to become available. Default: %i' % Creator.VM_PING_TIMEPUT,
                default=Creator.VM_PING_TIMEPUT, type='int', metavar='TIMEOUT')

        # Uploader
        self.parser.add_option('-f', '--force', dest='forceUpload',
                help='force upload of the appliance even if already exist.',
                default=False, action='store_true')

        self.parser.add_option('--curl-option', dest='uploadOption', metavar='OPTION',
                help='additional curl option', default='')

        AuthnCommand.addP12CertOptions(self.parser)

        super(MainProgram, self).parse()

    def diskSizeOptionCallback(self, option, opt_str, value, parser):
        setattr(parser.values, option.dest, 1024*value)

    def checkOptions(self):

        if self.options.showImageName:
            self.checkCredentials = False

        super(MainProgram, self).checkOptions()

        if self.options.showImageName:
            return

        if self.options.noUpload and self.options.shutdownVm:
            self.parser.error('If you specify --no-upload you also need to specify --no-shutdown, otherwise \
you\'ll never be able to retrieve the new image')

        if not self.options.comment:
            self.parser.error('Please provide a comment describing the new image')

        if not self.options.author:
            self.parser.error('Please provide an author for the new image')

        if not self.options.apprepoEndpoint and not self.options.noUpload:
            if Util.getProtoFromUri(self.image) and Util.getProtoHostnameFromUri(self.image):
                self.options.apprepoEndpoint = Util.getProtoHostnameFromUri(self.image)
            else:
                self.parser.error('Missing repository address')
        if not self.options.apprepoUsername and not self.options.noUpload:
            self.parser.error('Missing repository username')
        if not self.options.apprepoPassword and not self.options.noUpload:
            self.parser.error('Missing repository password')

        AuthnCommand.checkP12CertOptionsOnly(self)

    def doWork(self):

        configHolder = ConfigHolder(self.options.__dict__)
        self.creator = Creator(self.image, configHolder)

        if self.options.showImageName:
            Util.printAction('Simulating new image name')
            Util.printStep(self.creator.showName())
            return
        self.creator.create()


if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
