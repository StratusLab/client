import os.path
#!/usr/bin/env python

import os
import subprocess
import sys
from optparse import OptionParser

sys.path.append('/usr/lib/stratuslab')
sys.path.append(os.path.abspath('%s/../src/' % os.path.abspath(os.path.dirname(__file__))))

from stratuslab.Util import fileGetContent
from stratuslab.Util import cliLineSplitChar
from stratuslab.CommandBase import CommandBase
from stratuslab.Util import execute
from stratuslab.Util import sshCmd
from stratuslab.Util import scp
from stratuslab.Util import printAction
from stratuslab.Util import printStep

class MainProgram(CommandBase):
    '''A command line to install stratuslab on a remote host'''

    def __init__(self):
        self.rootPath = os.path.abspath('%s/../' %
                                        os.path.abspath(os.path.dirname(__file__)))
        super(MainProgram, self).__init__()

    def parse(self):
        usage = 'usage: %prog [options]'
        self.parser.usage = usage

        self.parser.add_option('-n', '--nodes', dest='nodes',
                               help='node list, separate by space', default='localhost')
        self.parser.add_option('-p', '--port', dest='sshPort',
                               help='ssh port of the frontend', default=22)
        self.parser.add_option('-k', '--key', dest='sshKey',
                               help='ssh key to connect to the frontend',
                               metavar='KEY_PATH',
                               default=os.path.expandvars("$HOME/.ssh/root_hudson_id_rsa.key"))
        self.parser.add_option('-f', '--frontend', dest='frontend',
                               help='frontend endpoint', metavar='ENDPOINT',
                               default='localhost')
        self.parser.add_option('-u', '--upload-dir', metavar='PATH',
                               dest='uploadDir', help='remote source directory',
                               default='/tmp/stratuslab-remote-install')
        self.parser.add_option('-c', '--config', dest='config', 
                               help='additional config file with "key:value#key:value" in',
                               default=None)

        self.options, self.args = self.parser.parse_args()

    def doWork(self):
        printAction('Starting StratusLab remote installation')        

        printStep('Multi-install workaround...\n')
        self.multiInstallWorkaround()
        
        printStep('Upload stratuslab...\n')
        self.uploadStratuslab()

        printStep('Configure stratuslab...\n')
        self.configureStratuslab()
        self.copySshPrivateKey()

        printStep('Install stratuslab frontend...\n')
        self.installStratuslabFrontend()

        printStep('Install stratuslab nodes...\n')
        self.installStratuslabNodes()

        printAction('Installation done')        


    def multiInstallWorkaround(self):
        self.sshCmd('su -l oneadmin -c "one stop"',
                 exitOnError=False)
        self.sshCmd('rm -rf /srv/cloud/one/lib',
                 exitOnError=False)
        self.sshCmd('rm -rf /srv/cloud/one/var',
                 exitOnError=False)
        self.sshCmd('rm -rf /srv/cloud/one/.ssh',
                 exitOnError=False)

    def sshCmd(self, cmd, exitOnError=True):
        ret = sshCmd(cmd, 
                     self.options.frontend, 
                     self.options.sshKey, 
                     self.options.sshPort, 
                     **{'verboseLevel': self.options.verboseLevel})
        self._handleError(ret, cmd, exitOnError)

    def _handleError(self, ret, cmd, exitOnError=True):
        if ret != 0 :
            print 'Command failed: %s' % cmd,
            if exitOnError:
                sys.exit(1)
            else:
                print " but it's OK"

    def uploadStratuslab(self):
        self.sshCmd('rm -rf ' + self.options.uploadDir,
                 exitOnError=False)
        self.sshCmd('mkdir -p ' + self.options.uploadDir)
        self.scp('%s/src/' % self.rootPath, '%s:%s' % (
                 self.options.frontend, self.options.uploadDir))
        self.scp('%s/scripts/' % self.rootPath, '%s:%s' % (
                 self.options.frontend, self.options.uploadDir))

    def scp(self, src, dest):
        ret = scp(src, 
                  'root@' + dest, 
                  self.options.sshKey, 
                  self.options.sshPort, 
                  **{'verboseLevel': self.options.verboseLevel})
        self._handleError(ret, 'Remote copy of %s to %s' % (src, dest))

    def configureStratuslab(self):
        content = ''
        if self.options.config and os.path.isfile(self.options.config):
            content = fileGetContent(self.options.config)
            
        baseConfigCmd = 'python %s/scripts/stratus-config' % self.options.uploadDir

        baseConfigCmd = self._addVerboseOption(baseConfigCmd)

        if content:
            for item in content.split(cliLineSplitChar):
                currentCmd = baseConfigCmd[:]
                currentCmd += ' ' + item.split(':')[0]
                currentCmd += ' "%s"' %(' '.join(item.split(':')[1:]))
                self.sshCmd(currentCmd)
        else:
            self.sshCmd(baseConfigCmd)

    def _addVerboseOption(self, cmd):
        if self.options.verboseLevel > 0:
            cmd += ' -' + 'v'*self.options.verboseLevel
        return cmd

    def copySshPrivateKey(self):
        self.scp(self.options.sshKey, '%s:.ssh/id_rsa' 
                 % self.options.frontend)

    def installStratuslabFrontend(self):
        cmd = 'python %s/scripts/stratus-install' % self.options.uploadDir
        cmd = self._addVerboseOption(cmd)
        self.sshCmd(cmd)

    def installStratuslabNodes(self):
        for node in self.options.nodes.split(' '):
            cmd = 'python %s/scripts/stratus-install -n %s' % (self.options.uploadDir, node)
            cmd = self._addVerboseOption(cmd)
            self.sshCmd(cmd)


if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
