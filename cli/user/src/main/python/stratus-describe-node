#!/usr/bin/env python

import os
import sys
from optparse import OptionParser

sys.path.append('/usr/lib/stratuslab')
sys.path.append(os.path.abspath('%s/../src/' % os.path.abspath(os.path.dirname(__file__))))

from stratuslab.Util import modulePath
from stratuslab.CommandBase import CommandBase
from stratuslab.InstallatorFactory import InstallatorFactory
from stratuslab.Util import parseConfig
from stratuslab.Monitor import Monitor


class MainProgram(CommandBase):
    '''A command-line program to monitor the state of nodes.'''

    def __init__(self):
        self.nodes = []
        super(MainProgram, self).__init__()

    def parse(self):
        usage = '''usage: %prog [options] [node-id]
Without the parameter [node-id] the command lists the available nodes'''

        self.parser.usage = usage
        self.parser.add_option('-c', '--config', dest='configFile', 
                               help='configuration file', metavar='FILE',
                               default='%s/conf/stratuslab.cfg' % modulePath)
        
        self.parser.add_option('-p', '--password', dest='password', 
                               help='Cloud administrator password',
                               default='')

        self.parser.add_option('-x', '--xml', dest='rawxml', 
                               help='Retrieve raw xml',
                               default='')

        self.options, self.nodes = self.parser.parse_args()

    def checkOptions(self):
        if not self.options.password:
            self.parser.error('Missing --password')

    def doWork(self):
        config = parseConfig(self.options.configFile)
        monitor = Monitor(self.options.__dict__, config)
        if self.nodes:
            list = monitor.nodeDetail(self.nodes)
            monitor.printDetails(list)
        else:
            list = monitor.listNodes()
            monitor.printList(list)
            
if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
