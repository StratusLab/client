#!/usr/bin/env python
#
# Created as part of the StratusLab project (http://stratuslab.eu),
# co-funded by the European Commission under the Grant Agreement
# INFSO-RI-261552."
#
# Copyright (c) 2010, SixSq Sarl
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import sys

sys.path.append('/var/lib/stratuslab/python')

from stratuslab.CommandBase import CommandBaseSysadmin
from stratuslab.Registrar import Registrar
from stratuslab.ConfigHolder import ConfigHolder

# initialize console logging
import stratuslab.api.LogUtil as LogUtil

LogUtil.get_console_logger()


class MainProgram(CommandBaseSysadmin):
    """A command-line program to register ONE nodes with the ONE server."""

    def __init__(self):
        self.nodes = []
        super(MainProgram, self).__init__()

    def parse(self):
        self.parser.usage = '%prog [options] node-ip ...'

        self.parser.description = '''
Registers OpenNebula nodes with the OpenNebula frontend/server.
'''

        self.parser.add_option('-r', '--remove', dest='deRegister',
                               help='de-register node', action='store_true',
                               default=False)

        self.parser.add_option('-p', '--password', dest='password',
                               help='Cloud administrator password',
                               default='')

        # ONE specific parameters
        self.parser.add_option('--im', dest='infoDriver',
                               help='information driver', metavar='IM_NAME')
        self.parser.add_option('--vmm', dest='virtDriver',
                               help='virtualization driver', metavar='VM_NAME')
        self.parser.add_option('--tm', dest='transfertDriver',
                               help='transfert driver', metavar='VM_NAME')
        self.parser.add_option('--vnm', dest='networkDriver',
                               help='network driver', metavar='VM_NAME')

        self.options, self.nodes = self.parser.parse_args()

    def checkOptions(self):
        if not self.options.infoDriver:
            self.parser.error('Missing --im')
        if not self.options.virtDriver:
            self.parser.error('Missing --vmm')
        if not self.options.transfertDriver:
            self.parser.error('Missing --tm')
        if not self.options.networkDriver:
            self.parser.error('Missing --vnm')
        if not self.options.password:
            self.parser.error('Missing --password')

        self.checkArgumentsLength()

    def checkArgumentsLength(self):
        if len(self.nodes) < 1:
            raise self.usageExitTooFewArguments()

    def doWork(self):
        config = ConfigHolder.configFileToDict(self.options.configFile)
        configHolder = ConfigHolder(self.options.__dict__, config)
        registrar = Registrar(configHolder)
        registrar.register(self.nodes)


if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
