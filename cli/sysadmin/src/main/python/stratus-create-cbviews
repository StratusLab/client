#!/usr/bin/env python
#
# Copyright (c) 2012, Centre National de la Recherche Scientifique (CNRS)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import sys

sys.path.append('/var/lib/stratuslab/python')
from stratuslab.CommandBase import CommandBaseSysadmin
from stratuslab.ConfigHolder import ConfigHolder
import stratuslab.couchbase.Util as Util

# initialize console logging
import stratuslab.api.LogUtil as LogUtil

LogUtil.get_console_logger()


class MainProgram(CommandBaseSysadmin):
    """
    A command-line utility for creating a couchbase view.
    """
    def __init__(self):
        super(MainProgram, self).__init__()
	self.designDoc
	self.cbServer
	self.extraMapViewFile
	self.bucket	
    
    def parse(self):
        self.parser.usage = '%prog --designDoc=designDoc --cbServer=cbServer --bucket=bucket --mapviews-file=mapviewsFile'

        self.parser.add_option('--mapviews-file', dest='extraMapViewFile', metavar='FILE',
                help='extra map view file, contains map view function, written in JavaScript',
                default=None)

	self.parser.add_option('--designDoc', dest='designDoc',
           	help='Couchbase Design document name',
                default=None)

        self.parser.add_option('--cbServer', dest='cbServer',
                help='Couchbase Server hostname',
                default=None)

        self.parser.add_option('--bucket', dest='bucket',
                help='Couchbase bucket',
                default=None)

        self.parser.description = '''
Creates coubase view. Arguments are design_doc, view name, and 
the file containing the map view function.
'''

        self.options, self.args = self.parser.parse_args()
        print self.options     

        if not self.options.cbServer:
            self.parser.error('Missing mandatory --cbServer option')
        else:
            self.cbServer = self.options.cbServer

        if not self.options.bucket:
            self.parser.error('Missing mandatory --bucket option')
        else:
            self.bucket = self.options.bucket

        if not self.options.designDoc:
            self.parser.error('Missing mandatory --designDoc option')
        else:
            self.designDoc = self.options.designDoc

        if not self.options.extraMapViewFile:
            self.parser.error('Missing mandatory --extraMapViewFile option')
        else:
            self.extraMapViewFile = self.options.extraMapViewFile


    def doWork(self):
        mapviewsFile = open(self.extraMapViewFile, 'rb')
        mapviewsFileData = mapviewsFile.read()
        mapviewsFile.close()
	Util.create_views(self.cbServer, self.bucket, self.designDoc, mapviewsFileData)
	print "mapviewsFileData=", mapviewsFileData


if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
