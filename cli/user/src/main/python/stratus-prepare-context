#!/usr/bin/env python
#
# Copyright (c) 2012, Centre National de la Recherche Scientifique (CNRS)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import base64
import os
import sys

sys.path.append('/var/lib/stratuslab/python')

from stratuslab.CommandBase import CommandBase
from stratuslab.ConfigHolder import ConfigHolder
from stratuslab.cloudinit import Util

class MainProgram(CommandBase):
    '''A command-line utility for generating a cloud-init context file.'''

    def __init__(self):
        self.image = None
        super(MainProgram, self).__init__()

    def parse(self):
        self.parser.usage = '%prog files'

        self.parser.description = 'files - list of mime types and files'

        self.options, self.args = self.parser.parse_args()

    def checkOptions(self):
        pass

    def doWork(self):
        authorized_keys = self._getEncodedAuthorizedKeysFile()
        user_data = self._getEncodedUserData()

        # Do NOT add spaces around the equals sign.  These will leak into the
        # values defined in the context file defined by OpenNebula.
        contents = '''
CONTEXT_METHOD=cloud-init
'''
        if authorized_keys:
            contents = contents + "CLOUD_INIT_AUTHORIZED_KEYS=%s\n" % authorized_keys
        if user_data:
            contents = contents + "CLOUD_INIT_USER_DATA=%s\n" % user_data

        with open('cloud-init.txt', 'wb') as f:
            f.write(contents)


    def _getEncodedUserData(self):
        mimefiles = []
        for entry in self.args:
            mimetype, file = entry.split(',')
            if (mimetype != 'ssh'):
                mimefiles.append((mimetype, file))
        if (len(mimefiles) == 0):
            return None
        else:
            return Util.encodeMultipart(Util.createMultipartStringFromFiles(mimefiles))

    def _getEncodedAuthorizedKeysFile(self):
        keyfiles = []
        for entry in self.args:
            mimetype, file = entry.split(',')
            if (mimetype == 'ssh'):
                keyfiles.append(file)
        if (len(keyfiles) == 0):
            return None
        else:
            contents = Util.createAuthorizedKeysFromFiles(keyfiles)
            return base64.b64encode(contents)


if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
