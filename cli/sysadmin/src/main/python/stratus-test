#!/usr/bin/env python
#
# Created as part of the StratusLab project (http://stratuslab.eu),
# co-funded by the European Commission under the Grant Agreement
# INFSO-RI-261552."
#
# Copyright (c) 2010, SixSq Sarl
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import sys
from optparse import OptionParser

sys.path.append('/var/lib/stratuslab/python')

from stratuslab.CommandBase import CommandBase
from stratuslab.Testor import Testor
from stratuslab.ConfigHolder import ConfigHolder
from stratuslab.AuthnCommand import AuthnCommand
from stratuslab.commandbase.StorageCommand import StorageCommand
import stratuslab.Util as Util
from stratuslab.Uploader import Uploader
from stratuslab.marketplace.Util import Util as MarketplaceUtil

class MainProgram(CommandBase):
    '''A command-line program to test StratusLab.'''

    def __init__(self):
        super(MainProgram, self).__init__()

    def parse(self):
        usage = '%prog [options] [test] ...'

        self.parser.description = '[test] - comma separated list of tests, according to the name provided by -l/--list.'

        self.parser.usage = usage
        self.parser.add_option('-c', '--config', dest='configFile',
                               help='configuration file', metavar='PATH',
                               default=Util.defaultConfigFile)

        self.parser.add_option('-l', '--list', dest='listTests',
                               help='list available tests', action='store_true',
                               default=False)

        self.parser.add_option('--requested-ip-address', dest='requestedIpAddress',
                               help='IP address for requested IP address assignment', metavar='IP',
                               default=None)

        self.parser.add_option('--test-username', dest='testUsername',
                               help='Test username to use when communicating with ONE', metavar='USER',
                               default=os.getenv('STRATUSLAB_USERNAME', ''))

        self.parser.add_option('--test-password', dest='testPassword',
                               help='Test password to use when communicating with ONE', metavar='PASSWORD',
                               default=os.getenv('STRATUSLAB_PASSWORD', ''))

        self.parser.add_option('--exclude', dest='testsToExclude',
                               help='list of tests to exclude (comma separated)',
                               default='', metavar='TESTS')
                               
        self.parser.add_option('--claudia-customer', dest='claudiaCustomer',
                               help='Customer name used by Claudia',
                               default=None, metavar='CUSTOMER')

        self.parser.add_option('--claudia-service-name', dest='claudiaServiceName',
                               help='Service name used by Claudia',
                               default=None, metavar='SERVICE')

        self.parser.add_option('--claudia-ovf-endpoint', dest='claudiaOvfEndpoint',
                               help='Endpoint of the OVF file used by Claudia',
                               default=None, metavar='ENDPOINT')
        
        self.parser.add_option('--monitoring', dest='monitoringEndpoint',
                               help='Endpoint of the OVF file used by Claudia',                               
                               default=None, metavar='ENDPOINT')
        
        self.parser.add_option('--webmonitor-host', dest='webMonitorHost',
                               help='IP or hostname where Web Monitor is installed. If not set, cloud frontend '
                               'IP defined in configuration file will be used.',
                               default='', metavar='ENDPOINT')

        self.parser.add_option('--image-id-createimage', dest='imageIdCreateImage',
                               help='ID of the image to be used with createImageTest. '
                               'Default: ArCnG4gBogiprglBUdG6V8YX20y',
                               default='ArCnG4gBogiprglBUdG6V8YX20y', metavar='ID')

        self.parser.add_option('--author-email-createimage', dest='authorEmailCreateImage',
                               help='Used with createImageTest. New image author email. '
                               'Mandatory with createImageTest.', metavar='EMAIL')

        self.parser.add_option('--marketplace-endpoint-newimage', 
                               dest='marketplaceEndpointNewimage',
                               help='Used with createImageTest. Marketplace to '
                               'register the new image manifest in. No default. '
                               'If not provided, either base image Marketplace or defined '
                               'by cloud site will be used.',
                               default='', metavar='URL')

        MarketplaceUtil.addEndpointOption(self.parser)

        Uploader.buildAppRepoOptionsParser(self.parser)

        AuthnCommand.addP12CertOptions(self.parser, AuthnCommand.defaultRunOptions())
        StorageCommand.addPDiskEndpointOptions(self.parser)

        self.options, self.tests = self.parser.parse_args()

    def doWork(self):
        config = ConfigHolder.configFileToDict(self.options.configFile)
        configHolder = ConfigHolder(self.options.__dict__, config)
        Testor.configHolder = configHolder
        Testor.testNames = self.tests
        testor = Testor()

        if self.options.listTests:
            self._listTests(testor)
        else:
            self._runTests(testor)

    def _listTests(self, testor):
        testor.listAvalableTests()

    def _runTests(self, testor):
        wasSuccessful = testor.runTests()
        if not wasSuccessful:
            sys.exit(-1)


if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
        sys.exit(1)
