#!/usr/bin/env python
#
# Created as part of the StratusLab project (http://stratuslab.eu),
# co-funded by the European Commission under the Grant Agreement
# INFSO-RI-261552."
#
# Copyright (c) 2011, Centre National de la Recherche Scientifique (CNRS)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import sys
from optparse import OptionParser

sys.path.append('/var/lib/stratuslab/python')

from stratuslab.Util import modulePath, printError
from stratuslab.commandbase.StorageCommand import StorageCommand
from stratuslab.PersistentDisk import PersistentDisk
from stratuslab.ConfigHolder import ConfigHolder
from stratuslab.Configurator import Configurator


class MainProgram(StorageCommand):
    '''A command-line program to quarantine a storage disk.'''

    def parse(self):
        self.parser.usage = '%prog [uuid]'
        self.parser.description = '''Perform quarantine actions'''
        
        StorageCommand.addPDiskEndpointOptions(self.parser)

        self.parser.add_option('--clean', dest='quarantineCleanUp',
                          help='Clean quarantine store. No uuid parameter should be provided.',
                          default=False,
                          action='store_true')

        super(MainProgram, self).parse()

        self.options, self.args = self.parser.parse_args()

    def checkOptions(self):
#        StorageCommand.checkPDiskEndpointOptionsOnly(self)
        super(MainProgram, self).checkOptions()
        if self.options.quarantineCleanUp:
            if len(self.args) != 0:
                self.usageExitWrongNumberOfArguments()
        else:
            if len(self.args) != 1:
                self.usageExitWrongNumberOfArguments()
        
    def _addConfigFileOption(self):
        ConfigHolder.addConfigFileSysadminOption(self.parser)

    def doWork(self):
        config = ConfigHolder.configFileToDict(self.options.configFile)        
        configHolder = ConfigHolder(self.options.__dict__, config)

        if not configHolder.pdiskEndpoint:
            configHolder.pdiskEndpoint = Configurator(configHolder).getValue('persistent_disk_ip')

        pdisk = PersistentDisk(configHolder)

        if self.options.quarantineCleanUp:
            pdisk.cleanQuarantine()
        else:
            uuid = self.args[0]
            pdisk.quarantineVolume(uuid)

if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
