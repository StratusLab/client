#!/usr/bin/env python
#
# Created as part of the StratusLab project (http://stratuslab.eu),
# co-funded by the European Commission under the Grant Agreement
# INFSO-RI-261552."
#
# Copyright (c) 2010, SixSq Sarl
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import sys
from optparse import OptionParser

sys.path.append('/var/lib/stratuslab/python')

from stratuslab import Defaults
from stratuslab.CommandBase import CommandBaseSysadmin
import stratuslab.installator.InstallatorFactory as InstallatorFactory
import stratuslab.Util as Util
from stratuslab.ConfigHolder import ConfigHolder

class MainProgram(CommandBaseSysadmin):
    '''A command-line program to install StratusLab.'''

    def __init__(self):
        super(MainProgram, self).__init__()

    def parse(self):
        usage = '%prog [options]'

        self.parser.usage = usage
        
        self.parser.add_option('-n', '--node', dest='nodeAddr', 
                               help='IP address or hostname of the node to configure',
                               default=None, metavar='ADDRESS')
        self.parser.add_option('--apprepo', dest='appRepoAddr', 
                               help='IP address or hostname of the appliance repository to configure',
                               default=None, metavar='ADDRESS')
        self.parser.add_option('--web-monitor', dest='webMonitor', 
                               help='Install web monitor application',
                               action='store_true', default=False)
        self.parser.add_option('-k', '--private-key', dest='privateKey', 
                               help='private key for ssh node connection', metavar='FILENAME',
                               default=None)
        self.parser.add_option('--install', dest='onlyInstall',
                               help='Only install packages, don\'t perform setup', 
                               action='store_true', default=None)
        self.parser.add_option('--setup', dest='onlySetup',
                               help='Only setup system, don\'t install packages', 
                               action='store_true', default=None)
        self.parser.add_option('--claudia', dest='installCloudia',
                               help='Install Claudia', 
                               action='store_true', default=False)
        
        # ONE specific parameters
        self.parser.add_option('-t', '--template', dest='onedTpl', 
                               help='ONe daemon template', metavar='TEMPLATE',
                               default=os.path.join(Defaults.TEMPLATE_DIR, 'oned.conf.tpl'))
        self.parser.add_option('--im', dest='infoDriver', 
                               help='information driver', metavar='IM_NAME', default=None)
        self.parser.add_option('--vmm', dest='virtDriver',
                               help='virtualization driver', metavar='VM_NAME', default=None)
        self.parser.add_option('--tm', dest='transfertDriver', 
                               help='transfert driver', metavar='VM_NAME', default=None)
        
        self.options, _ = self.parser.parse_args()

    def checkOptions(self):
        if self.options.onlyInstall and self.options.onlySetup:
            self.parser.error('--install and --setup are mutually exclusive.')

    def doWork(self):
        config = ConfigHolder.configFileToDict(self.options.configFile)        
        configHolder = ConfigHolder(self.options.__dict__, config)

        self.installator = InstallatorFactory.getInstallator()
        self.installator.runInstall(configHolder)
        

if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
