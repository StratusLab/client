#!/usr/bin/env python
#
# Created as part of the StratusLab project (http://stratuslab.eu),
# co-funded by the European Commission under the Grant Agreement
# INFSO-RI-261552."
#
# Copyright (c) 2011, Centre National de la Recherche Scientifique (CNRS)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import sys

sys.path.append('/var/lib/stratuslab/python')

from stratuslab.CloudConnectorFactory import CloudConnectorFactory
from stratuslab.Util import printError
from stratuslab.commandbase.StorageCommand import StorageCommand
from stratuslab.AuthnCommand import AuthnCommand
from stratuslab.volume_manager.volume_manager_factory import VolumeManagerFactory
from stratuslab.ConfigHolder import ConfigHolder
from stratuslab.Authn import AuthnFactory
from stratuslab.Exceptions import OneException

# initialize console logging
import stratuslab.api.LogUtil as LogUtil

LogUtil.get_console_logger()


class MainProgram(AuthnCommand, StorageCommand):
    """A command-line program to attach a persistent disk."""

    def __init__(self):
        super(MainProgram, self).__init__()

    def parse(self):
        self.parser.usage = '%prog [options] volume-uuid'

        self.parser.description = '''
Attach a persistent volume (disk) to a running virtual machine.  The
volume-uuid argument is the unique identifier of the volume (disk) to
attach.
'''

        self.parser.add_option('-i', '--instance', dest='instance',
                               help='The ID of the instance to which the volume attaches', metavar='VM_ID',
                               default=0, type='int')

        StorageCommand.addPDiskEndpointOptions(self.parser)
        AuthnCommand.addCloudEndpointOptions(self.parser)

        super(MainProgram, self).parse()

        self.options, self.uuids = self.parser.parse_args()

    def checkOptions(self):
        super(MainProgram, self).checkOptions()
        if not self.uuids:
            printError('Please provide at least one persistent disk UUID to attach')
        if (self.options.instance < 0):
            printError('Please provide a VM ID on which to attach disk')
        try:
            self._setupCloudConnection()
            if not self.options.cloud.isVmRunning(self.options.instance):
                printError('VM %s is not in running state' % self.options.instance)
            self.node = self.options.cloud.getVmNode(self.options.instance)
        except OneException, e:
            printError(e)

    def _setupCloudConnection(self):
        credentials = AuthnFactory.getCredentials(self.options)
        self.options.cloud = CloudConnectorFactory.getCloud(credentials)
        self.options.cloud.setEndpoint(self.options.endpoint)

    def doWork(self):
        configHolder = ConfigHolder(self.options.__dict__, self.config or {})
        configHolder.pdiskProtocol = "https"
        pdisk = VolumeManagerFactory.create(configHolder)
        for uuid in self.uuids:
            free, _ = pdisk.getVolumeUsers(uuid)
            if free < 1:
                printError('DISK %s: Disk not available\n' % uuid, exit=False)
            else:
                target = pdisk.hotAttach(self.node, self.options.instance, uuid)
                print 'ATTACHED %s in VM %s on /dev/%s' % (uuid, self.options.instance, target)


if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
