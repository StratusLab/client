#!/usr/bin/env python
#
# Created as part of the StratusLab project (http://stratuslab.eu),
# co-funded by the European Commission under the Grant Agreement
# INFSO-RI-261552."
#
# Copyright (c) 2010, Centre National de la Recherche Scientifique (CNRS)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import sys
from optparse import OptionParser

sys.path.append('/var/lib/stratuslab/python')

from stratuslab.Util import modulePath
from stratuslab.AuthnCommand import AuthnCommand
from stratuslab.PersistentDisk import PersistentDisk
from stratuslab.ConfigHolder import ConfigHolder


class MainProgram(AuthnCommand):
    '''A command-line program to view the persistent disk.'''

    def __init__(self):
        self.vmIds = []
        super(MainProgram, self).__init__()

    def parse(self):

        self.parser.usage = '%prog  [volume_uid ...] [[--filter name=value] ...]'

        self.parser.description = '''List all available disk or only specified 
for the current user (-u/--username).'''

        AuthnCommand.addCloudEndpointOptions(self.parser)

        super(MainProgram, self).parse()

        self.options, _ = self.parser.parse_args()

    def checkOptions(self):
        AuthnCommand.checkCloudEndpointOptionsOnly(self)
        super(MainProgram, self).checkOptions()
        
    def doWork(self):
        configHolder = ConfigHolder(self.options.__dict__)
        pdisk = PersistentDisk(configHolder)
        volumes = pdisk.volumeList()
        self._printVolumes(volumes)
        
    def _printVolumes(self, volumes):
        if not len(volumes):
            print 'No disk yet.'
        for disk in volumes:
            print ':: DISK %s' % disk['uuid']
            self._printDict(disk, ['uuid',])
            
    def _printDict(self, dict, excludeKey=[]):
        for k, v in dict.items():
            if k not in excludeKey:
                print '\t%s: %s' % (k, v)
            
if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
