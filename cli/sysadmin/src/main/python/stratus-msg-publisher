#!/usr/bin/env python

import sys
import base64
import json

sys.path.append('/var/lib/stratuslab/python')

from stratuslab import Defaults
from stratuslab.ConfigHolder import ConfigHolder
from stratuslab.CommandBase import CommandBaseSysadmin

from stratuslab.messaging.RestPublisher import RestPublisher

class MainProgram(CommandBaseSysadmin):
    
    @staticmethod
    def set_imageid(message, imageid):
        'message - JSON and can be base64 encoded'
        if not message.startswith('{'):
            # Assume this is base64 encoded message.
            message = base64.b64decode(message)
        try:
            message_dict = json.loads(message)
        except Exception, ex:
            raise ValueError("Couldn't load JSON message: %s" % message)
        message_dict['imageid'] = imageid
        return json.dumps(message_dict)

    def __init__(self):
        self.msg_message = ''
        super(MainProgram, self).__init__()

    def parse(self):
        self.parser.usage = '%prog [options] message'

        self.parser.add_option('--msg-type', dest='msg_type',
                    help='Type of messaging queue: amazonsqs. Mandatory.', 
                    metavar='NAME', default="")
        self.parser.add_option('--msg-endpoint', dest='msg_endpoint',
                    help='Messaging service endpoint. Mandatory.', 
                    metavar='ENDPOINT', default="")
        self.parser.add_option('--msg-queue', dest='msg_queue',
                    help='Message queue name. Mandatory.', metavar='NAME',
                    default="")
        self.parser.add_option('--imageid', dest='imageid',
                    help='Image ID. Assumes message is JSON representation '
                    'of a dictionary on which the ID will be set. JSON can be '
                    'base64 encoded.', metavar='ID',
                    default="")

        self.options, self.args = self.parser.parse_args()

    def _checkMessageAndImageid(self):
        if len(self.args) != 0:
            self.msg_message = self.args[0]
        else:
            self.printError('Message should be set as first argument')

        # We are publishing image ID. Set image ID in the message.
        if self.options.imageid:
            self.msg_message = MainProgram.set_imageid(self.msg_message,
                                                       self.options.imageid)

    def checkOptions(self):
        super(MainProgram, self).checkOptions()

        if not self.options.msg_type:
            self.printMandatoryOptionError('--msg-type')
        if not self.options.msg_endpoint:
            self.printMandatoryOptionError('--msg-endpoint')
        if not self.options.msg_queue:
            self.printMandatoryOptionError('--msg-queue')

        self._checkMessageAndImageid()

    def doWork(self):
        config = ConfigHolder.configFileToDict(self.options.configFile) 
        configHolder = ConfigHolder(self.options.__dict__, config)
        
        if self.options.msg_type.lower() == 'amazonsqs':
            AmazonSqsQueue(self.options.msg_endpoint,
                                self.options.msg_queue,
                                    self.options.verboseLevel).send(self.msg_message)
        elif self.options.msg_type.lower() == 'rest':
            client = RestPublisher(configHolder)
            if self.options.imageid:
                client.send(self.options.imageid)
            else:
                client.send(self.msg_message)
                
if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
