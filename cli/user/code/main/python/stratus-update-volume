#!/usr/bin/env python
#
# Created as part of the StratusLab project (http://stratuslab.eu),
# co-funded by the European Commission under the Grant Agreement
# INFSO-RI-261552."
#
# Copyright (c) 2011, Centre National de la Recherche Scientifique (CNRS)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import sys

sys.path.append('/var/lib/stratuslab/python')

from stratuslab.Util import printError
from stratuslab.AuthnCommand import AuthnCommand
from stratuslab.commandbase.StorageCommand import StorageCommand
from stratuslab.volume_manager.volume_manager_factory import VolumeManagerFactory
from stratuslab.ConfigHolder import ConfigHolder

# initialize console logging
import stratuslab.api.LogUtil as LogUtil

LogUtil.get_console_logger()


class MainProgram(AuthnCommand, StorageCommand):
    """A command-line program to update persistent disk metadata."""

    def __init__(self):
        super(MainProgram, self).__init__()

    def parse(self):
        self.parser.usage = '%prog [options] volume-uuid'
        self.parser.description = '''
Update the metadata for a given persistent volume (disk).  The
volume-uuid is the unique identifier for the volume to update.
'''

        StorageCommand.addOptions(self.parser)

        super(MainProgram, self).parse()

        self.options, self.uuids = self.parser.parse_args()

    def checkOptions(self):
        StorageCommand.checkVolumeOptions(self)
        super(MainProgram, self).checkOptions()
        self._checkUuids()

    def _checkUuids(self):
        if not self.uuids:
            printError('A disk UUID must be supplied')
        if len(self.uuids) > 1:
            printError('Only one disk UUID can be specified')
        self.uuid = self.uuids[0]

    def doWork(self):
        configHolder = ConfigHolder(self.options.__dict__, self.config or {})
        configHolder.pdiskProtocol = "https"
        pdisk = VolumeManagerFactory.create(configHolder)

        keyvalues = self.extractVolumeOptionsAsDict()

        if len(keyvalues) > 0:
            pdisk.updateVolumeAsUser(keyvalues, self.uuid)


if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
