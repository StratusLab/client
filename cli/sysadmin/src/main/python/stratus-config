#!/usr/bin/env python

import os
import sys
from optparse import OptionParser

sys.path.append('/usr/lib/stratuslab')

from stratuslab.Util import modulePath
from stratuslab.CommandBase import CommandBase
from stratuslab.Configurator import Configurator
from stratuslab.ConfigHolder import ConfigHolder

class MainProgram(CommandBase):
    '''A command-line program to configure StratusLab.'''

    def __init__(self):
        super(MainProgram, self).__init__()

    def parse(self):
        usage = '''usage: %prog [options] [key [value]]
If the [value] is not provided, the command returns the current value of the key.'''
        self.parser.usage = usage

        self.parser.add_option('-c', '--config', dest='configFile',
                               help='Default configuration file', metavar='FILE',
                               default='%s/conf/stratuslab.cfg' % modulePath)
        self.parser.add_option('-k', '--keys', dest='showDefaultKeys',
                               help='Display keys and default value', action='store_true',
                               default=False)
        self.parser.add_option('-r', action='store_true', dest='revert',
                               help='Remove previous configuration',
                               default=False)

        self.options, self.args = self.parser.parse_args()

    def doWork(self):
        configHolder = ConfigHolder(self.options.__dict__)
        configurator = Configurator(configHolder)

        if self.options.revert:
            configurator.revertConfig()
        elif self.options.showDefaultKeys:
            configurator.displayDefaultKeys()
        elif len(self.args) == 0:
            configurator.writeUserConfig()
        elif len(self.args) == 1:
            if self.options.verboseLevel > 0:
                print ''
            print configurator.getValue(self.args[0])
        else:
            self.checkArgumentsLength()
            configurator.setOption(key=self.args[0], value=self.args[1])

    def checkArgumentsLength(self):
        if len(self.args) < 1:
            raise self.usageExitTooFewArguments()
        elif len(self.args) > 2:
            raise self.usageExitTooManyArguments()


if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
