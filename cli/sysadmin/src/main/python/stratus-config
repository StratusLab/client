#!/usr/bin/env python
#
# Created as part of the StratusLab project (http://stratuslab.eu),
# co-funded by the European Commission under the Grant Agreement
# INFSO-RI-261552."
#
# Copyright (c) 2010, SixSq Sarl
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import sys
from optparse import OptionParser

sys.path.append('/var/lib/stratuslab/python')

from stratuslab.Util import modulePath
import stratuslab.Util as Util
from stratuslab.CommandBase import CommandBase
from stratuslab.Configurator import Configurator
from stratuslab.ConfigHolder import ConfigHolder

class MainProgram(CommandBase):
    '''A command-line program to configure StratusLab.'''

    def __init__(self):
        super(MainProgram, self).__init__()

    def parse(self):
        usage = '''usage: %prog [options] [key [value]]
If the [value] is not provided, the command returns the current value of the key.'''
        self.parser.usage = usage

        self.parser.add_option('-c', '--config', dest='configFile',
                               help='Default configuration file', metavar='FILE',
                               default=Util.defaultConfigFile)
        self.parser.add_option('-k', '--keys', dest='showDefaultKeys',
                               help='Display keys and default value', action='store_true',
                               default=False)
        self.parser.add_option('-r', action='store_true', dest='revert',
                               help='Remove previous configuration',
                               default=False)

        self.options, self.args = self.parser.parse_args()

    def doWork(self):
        configHolder = ConfigHolder(self.options.__dict__)
        configurator = Configurator(configHolder)

        if self.options.revert:
            configurator.revertConfig()
        elif self.options.showDefaultKeys:
            configurator.displayDefaultKeys()
        elif len(self.args) == 0:
            configurator.writeUserConfig()
        elif len(self.args) == 1:
            if self.options.verboseLevel > 0:
                print ''
            print configurator.getValue(self.args[0])
        else:
            self.checkArgumentsLength()
            configurator.setOption(key=self.args[0], value=' '.join(self.args[1:]))

    def checkArgumentsLength(self):
        if len(self.args) < 1:
            raise self.usageExitTooFewArguments()


if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
