#!/usr/bin/env python

import os
import sys
from optparse import OptionParser

sys.path.append('/usr/lib/stratuslab')
sys.path.append(os.path.abspath('%s/../src/' % os.path.abspath(os.path.dirname(__file__))))

import stratuslab
from stratuslab.CommandBase import CommandBase
from stratuslab.InstallatorFactory import InstallatorFactory
from stratuslab.Util import parseConfig, printAction, printStep

class MainProgram(CommandBase):
    '''A command-line program to install StratusLab.'''

    def __init__(self):
        super(MainProgram, self).__init__()

    def parse(self):
        modulePath = os.path.abspath('%s/../' % os.path.abspath(os.path.dirname(stratuslab.__file__)))
        usage = 'usage: %prog [options]'

        parser = OptionParser(usage=usage)
        parser.add_option('-c', '--config', dest='configFile', 
            help='configuration file', metavar='FILE', 
            default='%s/conf/stratuslab.cfg' % modulePath)
        parser.add_option('-n', '--node', dest='nodeAddr', 
            help='IP address or hostname of the node to configure', 
            default=None, metavar='ADDRESS')
        parser.add_option('-k', '--private-key', dest='privateKey', 
            help='private key for ssh node connection', metavar='FILENAME', 
            default=None)
        
        # ONE specific parameters
        parser.add_option('-t', '--template', dest='onedTpl', 
            help='ONe daemon template', metavar='TEMPLATE',
            default='%s/conf/oned.conf.tpl' % modulePath)
        parser.add_option('--im', dest='infoDriver', 
            help='information driver', metavar='IM_NAME', default=None)
        parser.add_option('--vmm', dest='virtDriver',
            help='virtualization driver', metavar='VM_NAME', default=None)
        parser.add_option('--tm', dest='transfertDriver', 
            help='transfert driver', metavar='VM_NAME', default=None)
        
        self.options, _ = parser.parse_args()        

    def doWork(self):
        config = parseConfig(self.options.configFile)        
        installFactory = InstallatorFactory()
        self.installator = installFactory.getInstallator()
        self.installator.runInstall(self.options, config)


if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
