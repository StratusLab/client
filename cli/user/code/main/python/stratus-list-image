#!/usr/bin/env python
#
# Copyright (c) 2013, Centre National de la Recherche Scientifique (CNRS)
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#



import sys
sys.path.append('/var/lib/stratuslab/python')
import re

# initialize console logging
import stratuslab.api.LogUtil as LogUtil
#from stratuslab.marketplace import *
from stratuslab.ConfigHolder import ConfigHolder
from stratuslab.CommandBase import CommandBaseUser
from stratuslab.Exceptions import InputException
import stratuslab.Util as Util

from stratuslab.marketplace.Util import Util as MarketplaceUtil
from stratuslab.Util import importETree, etree_from_text

etree = importETree()

from stratuslab import Defaults
import stratuslab.Util
from stratuslab.Exceptions import ValidationException


ENVVAR_ENDPOINT = 'STRATUSLAB_MARKETPLACE_ENDPOINT'
#OPTION_STRING = '--marketplace-endpoint'

ENDPOINT = Defaults.marketplaceEndpoint
ENDPOINT_MKP = ENDPOINT + "/marketplace/metadata"

def MainProgram():
	"""
	List images on a given MarketPlace using mechanize
	"""
	try:
		import mechanize
	except:
		sys.exit("mechanize not found !! Exiting...")
	br = mechanize.Browser()
	response = br.open(ENDPOINT_MKP)
	content = response.read()

	# setting select box to 100 items
	#response['search_table_length'] = ["100"]
	#hundred_response = mechanize.urlopen(response.click())
	#print hundred_response.read()
	
	# checking marketplace endpoint URL
	url_is_ok = Util.checkUrlExists(ENDPOINT_MKP, 30)
	if url_is_ok is True:
		xml = Util.etree_from_text(content)
		
		desc_nodes = xml.iter("{http://www.w3.org/1999/02/22-rdf-syntax-ns#}Description")
		for desc_node in desc_nodes:
			print desc_node.find('{http://purl.org/dc/terms/}description').text
			print desc_node.find('{http://purl.org/dc/terms/}identifier').text
			print desc_node.find('{http://purl.org/dc/terms/}creator').text
			print desc_node.find('{http://purl.org/dc/terms/}created').text
			print "\n"



if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
