#!/usr/bin/env python
#
# Copyright (c) 2013, Centre National de la Recherche Scientifique
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import sys
from optparse import OptionParser

sys.path.append('/var/lib/stratuslab/python')

import os.path
import shutil
import stratuslab.Util as Util
from stratuslab.CommandBase import CommandBaseUser
from stratuslab.ConfigHolder import ConfigHolder

class MainProgram(CommandBaseUser):
    '''
    Copy the reference configuration file into the correct locaton for
    user.
    '''

    existingFileMsg = \
        'won\'t overwrite file (%s); use --force to overwrite'

    def __init__(self):
        self.args = None
        super(MainProgram, self).__init__()

    def parse(self):

        self.parser.usage='''%prog [options]'''

        self.parser.add_option('--force', action='store_true',
                dest='force', default=False,
                help='force overwrite of existing file')

        self.options, self.args = self.parser.parse_args()

    def checkOptions(self):
        pass

    def _create_parent_dir(self, dst):
        dir = os.path.dirname(dst)
        if not os.path.exists(dir):
            try:
                os.makedirs(dir)
            except:
                raise Exception('cannot create directory %s' % dir)

    def _copy_config(self, src, dst):
        try:
            shutil.copy(src, dst)
        except:
            raise Exception('error copying %s to %s' % (src, dst))

    def doWork(self):
        configHolder = ConfigHolder(self.options.__dict__)

        src = os.path.join(Util.modulePath, '..', '..', '..', 'conf', 'stratuslab-user.cfg.ref')
        dst = configHolder.configFile

        if os.path.exists(dst) and not configHolder.force:
            Util.printError(self.existingFileMsg % dst)
        else:
            try:
                self._create_parent_dir(dst)
                self._copy_config(src, dst)
                Util.printDetail('wrote configuration file: %s' % dst)
            except Exception as e: 
                Util.printError(e)

if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
