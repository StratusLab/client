#!/usr/bin/env python
#
# Created as part of the StratusLab project (http://stratuslab.eu),
# co-funded by the European Commission under the Grant Agreement
# INFSO-RI-261552."
#
# Copyright (c) 2010, SixSq Sarl
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import sys
from optparse import OptionParser

sys.path.append('/var/lib/stratuslab/python')

from stratuslab.Util import modulePath
from stratuslab.AuthnCommand import AuthnCommand
from stratuslab.Monitor import Monitor, MultisiteMonitor
from stratuslab.ConfigHolder import ConfigHolder
import stratuslab.Util as Util

from stratuslab.pat.Command import PortTranslationCommand

class MainProgram(AuthnCommand, PortTranslationCommand):
    '''A command-line program to monitor the state of virtual machines.'''

    def __init__(self):
        self.vmIds = []
        self.config = {}
        super(MainProgram, self).__init__()

    def parse(self):

        self.parser.usage = '%prog [options] [vm-id]'

        self.parser.description = '''[vm-id] - space separated list of VM IDs.
Without the parameter [vm-id] the command lists the available VMs belonging
to the user (-u/--username).'''

        PortTranslationCommand.addCommonOptions(self.parser)
        AuthnCommand.addCloudEndpointOptions(self.parser)
        Monitor.addOptions(self.parser)

        self.parser.add_option('-m', dest='multi_site', action='store_true', 
                help='Print state of virtual machines on multiple sites. '
                '"endpoints" parameter should be set in user configuration '
                'file.', 
                default=False)

        super(MainProgram, self).parse()

        self.options, self.vmIds = self.parser.parse_args()

    def checkOptions(self):
        AuthnCommand.checkCloudEndpointOptionsOnly(self)
        PortTranslationCommand.checkCommonOptions(self)
        super(MainProgram, self).checkOptions()
        
    def doWork(self):
        configHolder = ConfigHolder(self.options.__dict__, self.config or {})
        monitor = Monitor(configHolder)
        if self.vmIds:
            list = monitor.vmDetail(self.vmIds)
            if len(list) == 1 and self.verboseLevel > Util.VERBOSE_LEVEL_DETAILED:
                monitor.printVmAllAttributes(list)
            else:
                monitor.printVmDetails(list)
        else:
            if self.options.multi_site and self.config.get('endpoints'):
                    MultisiteMonitor(configHolder).printVmList()
            else:
                list = monitor.listVms()
                monitor.printVmList(list)
            
if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
