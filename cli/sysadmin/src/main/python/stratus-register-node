#!/usr/bin/env python

import os
import sys
from optparse import OptionParser

sys.path.append('/var/lib/stratuslab/python')
sys.path.append(os.path.abspath('%s/../../../../../src/' % os.path.abspath(os.path.dirname(__file__))))

from stratuslab.Util import modulePath
from stratuslab.CommandBase import CommandBase
from stratuslab.InstallatorFactory import InstallatorFactory
from stratuslab.Registrar import Registrar
from stratuslab.Configurable import Configurable


class MainProgram(CommandBase):
    '''A command-line program to register ONE nodes with the ONE server.'''

    def __init__(self):
        self.nodes = []
        super(MainProgram, self).__init__()

    def parse(self):
        usage = '''usage: %prog [options] node-ip ...'''

        self.parser.usage = usage
        self.parser.add_option('-c', '--config', dest='configFile', 
                               help='configuration file', metavar='FILE',
                               default='%s/conf/stratuslab.cfg' % modulePath)
        
        self.parser.add_option('-r', '--remove', dest='deRegister', 
                               help='de-register node', action='store_true',
                               default=False)

        self.parser.add_option('-p', '--password', dest='password', 
                               help='Cloud administrator password',
                               default='')

        # ONE specific parameters
        self.parser.add_option('--im', dest='infoDriver', 
                               help='information driver', metavar='IM_NAME')
        self.parser.add_option('--vmm', dest='virtDriver',
                               help='virtualization driver', metavar='VM_NAME')
        self.parser.add_option('--tm', dest='transfertDriver', 
                               help='transfert driver', metavar='VM_NAME')
        
        self.options, self.nodes = self.parser.parse_args()

    def checkOptions(self):
        if not self.options.infoDriver:
            self.parser.error('Missing --im')
        if not self.options.virtDriver:
            self.parser.error('Missing --vmm')
        if not self.options.transfertDriver:
            self.parser.error('Missing --tm')
        if not self.options.password:
            self.parser.error('Missing --password')
            
        self.checkArgumentsLength()

    def checkArgumentsLength(self):
        if len(self.nodes) < 1:
            raise self.usageExitTooFewArguments()

    def doWork(self):
        config = Configurable.configFileToDict(self.options.configFile)        
        registrar = Registrar(self.options.__dict__, config)
        registrar.register(self.nodes)
        
if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
