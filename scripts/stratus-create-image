#!/usr/bin/env python

import os
import sys

sys.path.append('/usr/lib/stratuslab')
sys.path.append(os.path.abspath('%s/../src/' % os.path.abspath(os.path.dirname(__file__))))

from stratuslab.UploadParser import buildUploadParser
from stratuslab.UploadParser import checkUploadOptions
from stratuslab.Uploader import Uploader
from stratuslab.Creator import Creator
from stratuslab.Runnable import Runnable

class MainProgram(Runnable):
    '''A command-line program to create StratusLab image.'''

    def parse(self):        
        self.parser.add_option('-s', '--scripts', dest='scripts',
                help='scripts to execute on the VM (separate by space)',
                default='', metavar='FILE')
        self.parser.add_option('-N', '--image-name', dest='imageName', metavar='Name',
                help='image name (e.g. base, grid.se, grid.wn, ...)', default='base')
        self.parser.add_option('-a', '--packages', dest='packages',
                help='packages to install on the machine (name separate by space)',
                default='', metavar='NAME')
        self.parser.add_option('-H', '--no-shutdown', dest='shutdownVm',
                help='leave the VM running. A public IP will be assigned.',
                default=True, action='store_false')
        self.parser.add_option('-V', '--img-version', dest='imageVersion',
                help='revision number of the image', metavar='VERSION',
                default="1.0")
        self.parser.add_option('--ip', dest='interface',
                help='interface to use to connect to the machine. By default the public one.',
                default="public")
        self.parser.add_option('--list-interface', dest='listInterface',
                help='list available machine interface',
                default=False, action='store_true')
        buildUploadParser(self.parser)
        super(MainProgram, self).parse()

        self.options, self.args = self.parser.parse_args()

    def availableInterface(self):
        return ['public', 'private', 'extra']

    def listInterface(self):
        print 'Available network interface: %s' % ', '.join(self.availableInterface())
        print ('\nNote that the extra interface refere to the network specified '
              'with the --nic option')
        sys.exit(0)

    def checkOptions(self):
        if self.options.listCompressionFormat:
            Uploader.availableCompressionFormat(True)
        if self.options.listInterface:
            self.listInterface()

        super(MainProgram, self).checkOptions()
        checkUploadOptions(self.options, self.parser)

        if self.options.interface not in self.availableInterface():
            self.parser.error('Wrong network interface. Available: %s' % ', '.join(self.availableInterface()))

    def doWork(self):        
        self.creator = Creator(self.image, self.options.__dict__)
        self.creator.create()
        

if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
