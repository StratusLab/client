#!/usr/bin/env python
#
# Created as part of the StratusLab project (http://stratuslab.eu),
# co-funded by the European Commission under the Grant Agreement
# INFSO-RI-261552."
#
# Copyright (c) 2010, SixSq Sarl
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import sys

sys.path.append('/var/lib/stratuslab/python')

from stratuslab.Util import fileGetContent
from stratuslab.Util import cliLineSplitChar
from stratuslab.CommandBase import CommandBase
from stratuslab.Util import sshCmd
from stratuslab.Util import scp
from stratuslab.Util import printAction
from stratuslab.Util import printStep

# initialize console logging
import stratuslab.api.LogUtil as LogUtil

LogUtil.get_console_logger()


class MainProgram(CommandBase):
    """A command line to install StratusLab on a remote host."""

    def __init__(self):
        self.rootPath = os.path.abspath('%s/../' %
                                        os.path.abspath(os.path.dirname(__file__)))
        super(MainProgram, self).__init__()

    def parse(self):
        self.parser.usage = '%prog [options]'

        self.parser.description = '''
Installs the StratusLab software on a remote host.
'''

        self.parser.add_option('-n', '--nodes', dest='nodes',
                               help='node list, separate by space', default='localhost')
        self.parser.add_option('-p', '--port', dest='sshPort',
                               help='ssh port of the frontend', default=22)
        self.parser.add_option('-k', '--key', dest='sshKey',
                               help='ssh key to connect to the frontend',
                               metavar='KEY_PATH',
                               default=os.path.expandvars("$HOME/.ssh/root_hudson_id_rsa.key"))
        self.parser.add_option('-f', '--frontend', dest='frontend',
                               help='frontend endpoint', metavar='ENDPOINT',
                               default='localhost')
        self.parser.add_option('-u', '--upload-dir', metavar='PATH',
                               dest='uploadDir', help='remote source directory',
                               default='/tmp/stratuslab-remote-install')
        self.parser.add_option('-c', '--config', dest='config',
                               help='additional config file with "key::value#key::value" in',
                               default=None)

        self.options, self.args = self.parser.parse_args()

    def doWork(self):
        printAction('Starting StratusLab remote installation')

        printStep('Multi-install workaround...\n')
        self.multiInstallWorkaround()

        printStep('Install StratusLab sysadmin tools...\n')
        self.installStratuslabSysAdminTools()

        printStep('Configure StratusLab...\n')
        self.configureStratuslab()
        self.copySshPrivateKey()

        printStep('Install StratusLab frontend...\n')
        self.installStratuslabFrontend()

        printStep('Install StratusLab nodes...\n')
        self.installStratuslabNodes()

        printAction('Installation done')

    def multiInstallWorkaround(self):
        self.sshCmd('su -l oneadmin -c "one stop"')
        self.sshCmd("kill -9 $(ps aux | grep oneadmin | grep -v grep | awk '{print $2}')")

        self.sshCmd('yum remove one-2.0-StratusLab -y')
        self.sshCmd('yum remove stratuslab-one-proxy -y')

        self.sshCmd('userdel -r oneadmin')
        self.sshCmd('rm -rf /home/oneadmin')
        self.sshCmd('groupdel cloud')

        self.sshCmd('rm -rf /var/lib/one')
        self.sshCmd('rm -rf /var/log/one')
        self.sshCmd('rm -rf /usr/lib/one')
        self.sshCmd('rm -rf /instances')

        self.sshCmd('rm -rf /var/lib/stratuslab')
        self.sshCmd('rm -rf /var/log/stratuslab')

        self._resetNodes()

    def _resetNodes(self):
        for node in self.options.nodes.split(' '):
            self.sshCmd('umount /instances', node)
            self.sshCmd('for i in $(virsh list | awk "NR > 2 { print $1 }"); do virsh destroy $i; done', node)
            self.sshCmd('kill -9 $(ps aux | grep oneadmin | grep -v grep | awk "{print $2}")', node)
            self.sshCmd('userdel oneadmin', node)
            self.sshCmd('groupdel cloud', node)
            self.sshCmd('umount /instances', node)
            self.sshCmd('rm -rf /instances /tmp/one* /tmp/stratus*', node)

    def sshCmd(self, cmd, endpoint=None, exitOnError=False):
        if not endpoint:
            endpoint = self.options.frontend
        ret = sshCmd(cmd,
                     endpoint,
                     self.options.sshKey,
                     self.options.sshPort,
                     **{'verboseLevel': self.options.verboseLevel})
        self._handleError(ret, cmd, exitOnError)

    def _handleError(self, ret, cmd, exitOnError=True):
        if ret != 0:
            print 'Command failed: %s' % cmd,
            if exitOnError:
                sys.exit(1)
            else:
                print " but it's OK"

    def installStratuslabSysAdminTools(self):
        yumConfFileName = '/tmp/yum-repo.conf'
        f = open(yumConfFileName, 'w')
        f.write(self._getStratusLabYumRepoConf())
        f.close()
        self.scp(yumConfFileName, '%s:/etc/yum.repos.d/stratuslab.repo' % self.options.frontend)
        # TODO: make this system dependent (i.e. apt-get for Ubuntu)
        self.sshCmd('yum install stratuslab-cli-sysadmin --nogpgcheck -y', exitOnError=True)

    def _getStratusLabYumRepoConf(self):
        return '''
[StratusLab-Snapshots]
name=StratusLab-Snapshots
baseurl=http://yum.stratuslab.eu/snapshots/sl5

[StratusLab-Releases]
name=StratusLab-Releases
baseurl=http://yum.stratuslab.eu/releases/sl5
'''

    def scp(self, src, dest):
        ret = scp(src,
                  'root@' + dest,
                  self.options.sshKey,
                  self.options.sshPort,
                  **{'verboseLevel': self.options.verboseLevel})
        self._handleError(ret, 'Remote copy of %s to %s' % (src, dest))

    def configureStratuslab(self):
        content = ''
        if self.options.config and os.path.isfile(self.options.config):
            content = fileGetContent(self.options.config)

        baseConfigCmd = 'stratus-config'

        baseConfigCmd = self._addVerboseOption(baseConfigCmd)

        if content:
            for item in content.split(cliLineSplitChar):
                currentCmd = baseConfigCmd[:]
                currentCmd += ' ' + item.split('::')[0]
                currentCmd += ' "%s"' % (' '.join(item.split('::')[1:]))
                self.sshCmd(currentCmd, exitOnError=True)
        else:
            self.sshCmd(baseConfigCmd, exitOnError=True)

    def _addVerboseOption(self, cmd):
        if self.options.verboseLevel > 0:
            cmd += ' -' + 'v' * self.options.verboseLevel
        return cmd

    def copySshPrivateKey(self):
        self.scp(self.options.sshKey, '%s:.ssh/id_rsa'
                                      % self.options.frontend)

    def installStratuslabFrontend(self):
        cmd = 'stratus-install'
        cmd = self._addVerboseOption(cmd)
        self.sshCmd(cmd, exitOnError=True)

    def installStratuslabNodes(self):
        for node in self.options.nodes.split(' '):
            cmd = 'stratus-install -n %s' % node
            cmd = self._addVerboseOption(cmd)
            self.sshCmd(cmd, exitOnError=True)


if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
