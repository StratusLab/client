#!/usr/bin/env python

import os
import sys
from optparse import OptionParser
from xml.dom import minidom, Node

sys.path.append('/var/lib/stratuslab/python')

from stratuslab.Util import modulePath
from stratuslab.CommandBase import CommandBase
from stratuslab.CreateBaseImage import CreateBaseImage
from stratuslab.Util import parseConfig

class MainProgram(CommandBase):
    '''A command line to automatically create a base VM image'''
    
    def __init__(self):
        #self.args = None
        #self.recipe = None 
        super(MainProgram, self).__init__()

    def parse(self):
        usage = '%prog [options] recipe'
        self.parser.usage = usage
        
        self.parser.add_option('--debug', dest='debug',
                          help='output log messages to console', 
                          action='store_true', default=False)

        self.options, self.args = self.parser.parse_args()
    
        self.options.imageSize = 5000
        self.options.swap = True
        self.options.swapSize = 256
        self.options.loopDev = '/dev/loop0'
        self.options.os = 'scientific-linux'
        self.options.osVersion = '5.5'
        self.options.arch = 'x86_64'
        self.options.type = 'base'
        self.options.imageVersion = '1.0'
        self.options.outputDir = '/var/tmp/stratuslab/create'
        self.options.mountDir = '/mnt/target'
        self.options.rootPasswd = None
        self.options.publicKey = None
        self.options.debian = False
        self.options.ubuntu = False
        self.options.mirror = 'http://ftp.ie.debian.org/debian'
        self.options.qtrProfile = None

    def checkOptions(self):
        if len(self.args) != 1:
            self.parser.error('Please specify a recipe file.')

        self.recipe = self.args[0]

        if os.path.isfile(self.recipe):
            self._parseRecipe()

        if not self.options.publicKey is None and not os.path.isfile(self.options.publicKey):
            self.parser.error('Public key specified does not exist.')
        if self.options.ubuntu and (self.options.osVersion == 'karmic' or self.options.osVersion == 'lucid'):
            self.parser.error('Sorry the latest Ubuntu release supported is Jaunty (9.04).')
        if self.options.type == 'base.quattor' and not self.options.os == 'scientific-linux':
            self.parser.error('Sorry Quattor installs only supported on Scientific Linux')

    def _parseRecipe(self):
        xmldoc = minidom.parse(self.recipe)
        rootNode = xmldoc.documentElement
        for node in rootNode.childNodes:
            if node.nodeType == Node.ELEMENT_NODE:
                option = node.nodeName
                value =  node.childNodes[0].nodeValue
       
                if(option == 'disk'):
                    for child in node.childNodes:
                        if child.nodeType == Node.ELEMENT_NODE:
                            o = child.nodeName
                            v = child.childNodes[0].nodeValue
                            
                            if(o == 'size'):
                                self.options.size = int(v)
                            elif(o == 'swap'):
                               self.options.swap = True
                               self.options.swapSize = int(v)
                            else:                                                          
                                self.parser.error('Unknown disk element in recipe file: %s.' % o)
                elif (option == 'os'):
                    for child in node.childNodes:  
                        if child.nodeType == Node.ELEMENT_NODE:
                            o = child.nodeName
                            v = child.childNodes[0].nodeValue
                            
                            if(o == 'name'):
                                self.options.os = v
                            elif(o == 'version'):
                               self.options.osVersion = v
                            elif(o == 'arch'):
                               self.options.arch = v
                            elif(o == 'dist'):
                               dist = v
                               if (dist == 'debian'):
                                   self.options.debian = True
                               elif (dist == 'ubuntu'):
                                   self.options.ubuntu = True
                               elif (dist == 'redhat'):
                                   self.options.redhat = True    
                               else:
                                   self.parser.error('Supported distributions are redhat, debian, ubuntu')
                            elif(o == 'mirror'):
                                self.options.mirror = v
                            else:                                                          
                                self.parser.error('Unknown os element in recipe file: %s.' % o)  
                elif(option == 'image'):
                    for child in node.childNodes:
                        if child.nodeType == Node.ELEMENT_NODE:
                            o = child.nodeName
                            v = child.childNodes[0].nodeValue
                            
                            if(o == 'type'):
                                self.options.type = v
                            elif(o == 'version'):
                                self.options.version = v
                            elif(o == 'passwd'):
                                self.options.rootPasswd = v
                            elif(o == 'key'):
                                self.options.publicKey = v
                            elif(o == 'quattor'):
                                self.options.qtrProfile = v
                            elif(o == 'loop'):
                                self.options.loopDev = v
                            elif(o == 'output'):
                                self.options.outputDir = v
                            elif(o == 'mount'):
                                self.options.mountDir = v
                            else:
                                self.parser.error('Unknown image element in recipe file: %s.' % o)                         
                else:
                    self.parser.error('Unknown element in recipe file.')
 
    def doWork(self):
        self.create = CreateBaseImage(self.options)
        self.create.createImage()
        
if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
        
