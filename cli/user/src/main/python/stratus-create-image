#!/usr/bin/env python
#
# Created as part of the StratusLab project (http://stratuslab.eu),
# co-funded by the European Commission under the Grant Agreement
# INFSO-RI-261552."
#
# Copyright (c) 2010, SixSq Sarl
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

import os
import sys

sys.path.append('/var/lib/stratuslab/python')

from stratuslab.Uploader import Uploader
from stratuslab.Creator import Creator
from stratuslab.Runnable import Runnable
from stratuslab.ConfigHolder import ConfigHolder


class MainProgram(Runnable):
    '''A command-line program to create StratusLab image.'''

    def parse(self):
        
        self.parser.usage = '''%prog [options] base-image'''

        self.parser.add_option('-s', '--scripts', dest='scripts',
                help='scripts to execute on the VM (comma separated)',
                default='', metavar='FILE')

        self.parser.add_option('-a', '--packages', dest='packages',
                help='packages to install on the machine (name separate by space)',
                default='', metavar='PACKAGE')

        self.parser.add_option('--no-shutdown', dest='shutdownVm',
                help='leave the VM running. A public IP will be assigned.',
                default=True, action='store_false')
        
        self.parser.add_option('-r', '--repository', dest='repoAddress',
                help='appliance repository address. Default STRATUSLAB_REPO',
                default=os.getenv('STRATUSLAB_REPO_ADDRESS'), metavar='ADDRESS')
    
        self.parser.add_option('-U', '--repo-username', dest='repoUsername',
                help='repository username. Default STRATUSLAB_REPO_USERNAME',
                default=os.getenv('STRATUSLAB_REPO_USERNAME'))

        self.parser.add_option('-P', '--repo-password', dest='repoPassword',
                help='repository password. Default STRATUSLAB_REPO_PASSWORD',
                default=os.getenv('STRATUSLAB_REPO_PASSWORD'))

        super(MainProgram, self).parse()


    def checkOptions(self):

        super(MainProgram, self).checkOptions()

        if not self.options.repoAddress:
            self.parser.error('Missing repository address')
        if not self.options.repoUsername:
            self.parser.error('Missing repository username')
        if not self.options.repoPassword:
            self.parser.error('Missing repository password')

    def doWork(self):
        configHolder = ConfigHolder(self.options.__dict__)
        self.creator = Creator(self.image, configHolder)
        self.creator.create()
        

if __name__ == '__main__':
    try:
        MainProgram()
    except KeyboardInterrupt:
        print '\n\nExecution interrupted by the user... goodbye!'
